// <auto-generated />
using System;
using DataAccessLayer.Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(TourPlannerContext))]
    [Migration("20240514163022_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entity.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("Distance");

                    b.Property<TimeSpan>("EstimatedTime")
                        .HasColumnType("interval")
                        .HasColumnName("EstimatedTime");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FromLocation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<string>("RouteImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RouteImagePath");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ToLocation");

                    b.Property<string>("TransportType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TransportType");

                    b.HasKey("Id")
                        .HasName("Tour_PK");

                    b.ToTable("Tour", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entity.TourLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateTime");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("Difficulty");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("Rating");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("double precision")
                        .HasColumnName("TotalDistance");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("interval")
                        .HasColumnName("TotalTime");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid")
                        .HasColumnName("TourId");

                    b.HasKey("Id")
                        .HasName("TourLog_PK");

                    b.HasIndex("TourId");

                    b.ToTable("TourLog", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entity.TourLog", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TourLog_TourId_FK");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
