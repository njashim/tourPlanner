@page "/tour"
@using BusinessLayer.Service.Interface
@using Model
@inject ITourService TourService
@* @rendermode InteractiveAuto *@
@rendermode InteractiveServer

<PageTitle>TourPlanner</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="text-center">
                <h4><b>Your Tour</b></h4>
            </div>

            <div class="row">
                <!-- From Location -->
                <div class="col-md-6 mb-3">
                    <label for="from" class="form-label">From:</label>
                    <input id="from" class="form-control" @bind="_tourModel.FromLocation" required />
                    <div class="invalid-feedback">Please provide a valid from location.</div>
                </div>
                <!-- To Location -->
                <div class="col-md-6 mb-3">
                    <label for="to" class="form-label">To:</label>
                    <input id="to" class="form-control" @bind="_tourModel.ToLocation" required />
                    <div class="invalid-feedback">Please provide a valid to location.</div>
                </div>
            </div>
            <!-- Transport Type -->
            <div class="mb-3">
                <label for="transporttype" class="form-label">Transport Type:</label>
                <select id="transporttype" name="transporttype" class="form-select" @bind="_tourModel.TransportType" required>
                    <option value="" disabled selected>Select Transport Type</option>
                    <option value="car">Car</option>
                    <option value="bicycle">Bicycle</option>
                    <option value="byFoot">By foot</option>
                    <option value="publicTransport">Public transport</option>
                </select>
                <div class="invalid-feedback">Please select a transport type.</div>
            </div>

            <!-- Name of Tour -->
            <div class="mb-3">
                <label for="tourname" class="form-label">Name of Tour:</label>
                <input id="tourname" class="form-control" @bind="_tourModel.Name" required />
                <div class="invalid-feedback">Please provide a tour name.</div>
            </div>
            <!-- Description of Tour -->
            <div class="mb-3">
                <label for="tourdescription" class="form-label">Description of Tour:</label>
                <input id="tourdescription" class="form-control" @bind="_tourModel.Description" style="height:100px" required />
                <div class="invalid-feedback">Please provide a tour description.</div>
            </div>

            <!-- Submit Button -->
            <button class="btn btn-primary" @onclick="UpdateTour">Submit</button>
            <button type="button" class="btn btn-danger" @onclick="ResetTourModel">Reset</button>

            <!-- Search Form -->
            <form action="#" method="get" class="mb-3" style="margin-top:20px">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search..." name="q">
                    <button type="submit" class="btn btn-primary">
                        Search
                    </button>
                </div>
            </form>

            <!-- Tour Table -->
            <div class="table-responsive" style="max-width: 100%;">
                <table class="table table-striped table-bordered">
                    <!-- Table Header -->
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Description</th>
                            <th scope="col">From</th>
                            <th scope="col">To</th>
                            <th scope="col">Transport Type</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <!-- Table Body -->
                    <tbody>
                        @foreach (var tourModel in _tourModelList)
                        {
                            <tr>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.Name</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.Description</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.FromLocation</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.ToLocation</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.TransportType</td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-primary btn-sm" @onclick="() => EditTour(tourModel)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTour(tourModel.Id)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                        <button class="btn btn-info btn-sm" @onclick="() => ShowTourInfo(tourModel)">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Tour Details -->
        <div class="col-md-6">
            <div class="text-center">
                <h4><b>Tour Details</b></h4>
            </div>
            <div id="map" style="height: 300px; background-color: lightgray;"></div>
            <br />
            @if (_selectedTour != null)
            {
                <div>
                    <p><strong>Name:</strong> @_selectedTour.Name</p>
                    <p><strong>Description:</strong> @_selectedTour.Description</p>
                    <p><strong>From:</strong> @_selectedTour.FromLocation</p>
                    <p><strong>To:</strong> @_selectedTour.ToLocation</p>
                    <p><strong>Transport Type:</strong> @_selectedTour.TransportType</p>
                    <p><strong>Time:</strong> @_selectedTour.EstimatedTime</p>
                    <p><strong>Distance:</strong> @_selectedTour.Distance</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Guid _selectedTourId;
    private TourModel _selectedTour;

    private void EditTour(TourModel tourModel)
    {
        _selectedTourId = tourModel.Id;
        _tourModel = tourModel;
    }

    private async Task UpdateTour()
    {
        if (IsValidForm())
        {
            _tourModel.Id = _selectedTourId;
            await TourService.UpdateTourAsync(_tourModel);
            LoadTourData();
            ResetTourModel();
            _selectedTourId = Guid.Empty;
        }
    }

    private TourModel _tourModel { get; set; }
    private List<TourModel> _tourModelList { get; set; }

    protected override void OnInitialized()
    {
        _tourModel = new TourModel();
        LoadTourData();
    }

    private void LoadTourData()
    {
        _tourModelList = TourService.GetTours();
    }

    private async Task CreateTour()
    {
        if (IsValidForm())
        {
            await TourService.CreateTourAsync(_tourModel);
            LoadTourData();
            ResetTourModel();
        }
    }

    private bool IsValidForm()
    {
        return _tourModel != null && !string.IsNullOrWhiteSpace(_tourModel.FromLocation) &&
               !string.IsNullOrWhiteSpace(_tourModel.ToLocation) &&
               !string.IsNullOrWhiteSpace(_tourModel.TransportType) &&
               !string.IsNullOrWhiteSpace(_tourModel.Name);
    }

    private async Task DeleteTour(Guid tourModelId)
    {
        await TourService.DeleteTourAsync(tourModelId);
        LoadTourData();
    }

    private void ResetTourModel()
    {
        _tourModel = new TourModel();
        StateHasChanged();
    }

    private void ShowTourInfo(TourModel tourModel)
    {
        _selectedTour = tourModel;
        StateHasChanged();
    }
}
