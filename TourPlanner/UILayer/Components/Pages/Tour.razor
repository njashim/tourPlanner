@page "/tour"
@using BusinessLayer.Service.Interface
@using Model
@inject ITourService TourService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>TourPlanner</PageTitle>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js"></script>


<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="text-center">
                <h4><b>Your Tour</b></h4>
            </div>

            <div class="row">
                <!-- From Location -->
                <div class="col-md-6 mb-3">
                    <label for="from" class="form-label">From:</label>
                    <input id="from" class="form-control" @bind="_tourModel.FromLocation" required />
                    <div class="invalid-feedback">Please provide a valid from location.</div>
                </div>
                <!-- To Location -->
                <div class="col-md-6 mb-3">
                    <label for="to" class="form-label">To:</label>
                    <input id="to" class="form-control" @bind="_tourModel.ToLocation" required />
                    <div class="invalid-feedback">Please provide a valid to location.</div>
                </div>
            </div>
            <!-- Transport Type -->
            <div class="mb-3">
                <label for="transporttype" class="form-label">Transport Type:</label>
                <select id="transporttype" name="transporttype" class="form-select" @bind="_tourModel.TransportType" required>
                    <option value="" disabled selected>Select Transport Type</option>
                    <option value="car">Car</option>
                    <option value="bicycle">Bicycle</option>
                    <option value="byFoot">By foot</option>
                    <option value="publicTransport">Public transport</option>
                </select>
                <div class="invalid-feedback">Please select a transport type.</div>
            </div>

            <!-- Name of Tour -->
            <div class="mb-3">
                <label for="tourname" class="form-label">Name of Tour:</label>
                <input id="tourname" class="form-control" @bind="_tourModel.Name" required />
                <div class="invalid-feedback">Please provide a tour name.</div>
            </div>
            <!-- Description of Tour -->
            <div class="mb-3">
                <label for="tourdescription" class="form-label">Description of Tour:</label>
                <input id="tourdescription" class="form-control" @bind="_tourModel.Description" style="height:100px" required />
                <div class="invalid-feedback">Please provide a tour description.</div>
            </div>

            <!-- Submit Button -->
            <button class="btn btn-primary" @onclick="UpdateTour">Submit</button>
            <button type="button" class="btn btn-danger" @onclick="ResetTourModel">Reset</button>

            <!-- Search Form -->
            <div class="mb-3" style="margin-top:20px">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search..." @bind="searchQuery" @oninput="SearchTours" />
                    <button type="button" class="btn btn-primary" @onclick="SearchTours">
                        Search
                    </button>
                </div>
            </div>

            <!-- Tour Table -->
            <div class="table-responsive" style="max-width: 100%;">
                <table class="table table-striped table-bordered">
                    <!-- Table Header -->
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Description</th>
                            <th scope="col">From</th>
                            <th scope="col">To</th>
                            <th scope="col">Transport Type</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <!-- Table Body -->
                    <tbody>
                        @foreach (var tourModel in filteredTourModelList)
                        {
                            <tr>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.Name</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.Description</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.FromLocation</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.ToLocation</td>
                                <td class="text-truncate" style="max-width: 75px;">@tourModel.TransportType</td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-primary btn-sm" @onclick="() => EditTour(tourModel)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTour(tourModel.Id)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                        <button class="btn btn-info btn-sm" @onclick="() => ShowTourInfo(tourModel)">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Tour Details -->
        <div class="col-md-6">
            <div class="text-center">
                <h4><b>Tour Details</b></h4>
            </div>
            <div id="map" style="height: 400px; width: 100%;"></div> <!-- Added height and width -->

            <br />
            @if (_selectedTour != null)
            {
                <div>
                    <p><strong>Name:</strong> @_selectedTour.Name</p>
                    <p><strong>Description:</strong> @_selectedTour.Description</p>
                    <p><strong>From:</strong> @_selectedTour.FromLocation</p>
                    <p><strong>To:</strong> @_selectedTour.ToLocation</p>
                    <p><strong>Transport Type:</strong> @_selectedTour.TransportType</p>
                    <p><strong>Time:</strong> @_selectedTour.EstimatedTime</p>
                    <p><strong>Distance:</strong> @_selectedTour.Distance</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Guid _selectedTourId;
    private TourModel _selectedTour;
    private string searchQuery = string.Empty;
    private object directions; // Add this line to define the directions variable

    private void EditTour(TourModel tourModel)
    {
        _selectedTourId = tourModel.Id;
        _tourModel = tourModel;
    }

    private async Task UpdateTour()
    {
        if (IsValidForm())
        {
            _tourModel.Id = _selectedTourId;
            await TourService.UpdateTourAsync(_tourModel);
            LoadTourData();
            ResetTourModel();
            _selectedTourId = Guid.Empty;
        }
    }

    private TourModel _tourModel { get; set; }
    private List<TourModel> _tourModelList { get; set; }
    private List<TourModel> filteredTourModelList => string.IsNullOrWhiteSpace(searchQuery)
        ? _tourModelList
        : _tourModelList.Where(t => t.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
                                 || t.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
                                 || t.FromLocation.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
                                 || t.ToLocation.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
                                 || t.TransportType.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override void OnInitialized()
    {
        _tourModel = new TourModel();
        LoadTourData();
    }

    private void LoadTourData()
    {
        _tourModelList = TourService.GetTours();
    }

    private async Task CreateTour()
    {
        if (IsValidForm())
        {
            await TourService.CreateTourAsync(_tourModel);
            LoadTourData();
            ResetTourModel();
        }
    }

    private bool IsValidForm()
    {
        return _tourModel != null && !string.IsNullOrWhiteSpace(_tourModel.FromLocation) &&
               !string.IsNullOrWhiteSpace(_tourModel.ToLocation) &&
               !string.IsNullOrWhiteSpace(_tourModel.TransportType) &&
               !string.IsNullOrWhiteSpace(_tourModel.Name);
    }

    private async Task DeleteTour(Guid tourModelId)
    {
        await TourService.DeleteTourAsync(tourModelId);
        LoadTourData();
    }

    private void ResetTourModel()
    {
        _tourModel = new TourModel();
        StateHasChanged();
    }

    private void ShowTourInfo(TourModel tourModel)
    {
        _selectedTour = tourModel;
        StateHasChanged();
    }

    private void SearchTours()
    {
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the map after the first render
            directions = new { bbox = new double[] { 16.3725, 48.2082, 16.3735, 48.2092 } }; // Example bounding box
            await JSRuntime.InvokeVoidAsync("initializeMap", "map", directions);
        }
    }
}

<script>
    window.initializeMap = async (mapId, directions) => {
        // Funktion zum Laden von Leaflet.js-Skript
        const loadLeaflet = () => {
            return new Promise((resolve, reject) => {
                if (window.L) {
                    resolve();
                } else {
                    const script = document.createElement('script');
                    script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
                    script.onload = resolve;
                    script.onerror = reject;
                    document.head.appendChild(script);
                }
            });
        };

        // Warte auf das Laden von Leaflet.js
        try {
            await loadLeaflet();
        } catch (error) {
            console.error('Fehler beim Laden von Leaflet.js:', error);
            return;
        }

        // Leaflet.js ist nun geladen, Karteninitialisierung fortsetzen
        var map = L.map(mapId);
        var bbox = directions.bbox;

        map.fitBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '2024 © FH Technikum Wien'
        }).addTo(map);

        // Füge GeoJSON-Layer zur Karte hinzu
        try {
            console.log('GeoJSON-Objekt:', directions); // Logge das GeoJSON-Objekt zur Fehlerbehebung
            L.geoJSON(directions).addTo(map);
        } catch (error) {
            console.error('Fehler beim Hinzufügen von GeoJSON zur Karte:', error);
        }
    };

</script>
