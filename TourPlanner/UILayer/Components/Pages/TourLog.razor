@page "/tourlog"
@using Model
@using BusinessLayer.Service.Interface
@inject ITourService TourService
@inject ITourLogService TourLogService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>TourLog Planner</PageTitle>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js"></script>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="text-center">
                <h4><b>Your Tour Log</b></h4>
            </div>
            <!-- Rest des Formulars -->
            <form @ref="formRef">
                <div class="mb-3">
                    <label for="tour" class="form-label">Tour:</label>
                    <select id="tourSelect" name="tour" class="form-select" @onchange="OnTourChanged">
                        <option value="" disabled selected>@(_selectedTourId == Guid.Empty ? "Select Tour" : GetTourName(_selectedTourId))</option>
                        @foreach (var tourModel in _tourModelList)
                        {
                            <option value="@tourModel.Id">@tourModel.Name</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="datum" class="form-label">Datum:</label>
                    <input type="date" id="datum" name="datum" class="form-control" @bind="_datum" required>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="difficulty" class="form-label">Difficulty:</label>
                        <select id="difficulty" name="difficulty" class="form-select" @bind="_difficulty" required>
                            <option value="" disabled>Tour Difficulty</option>
                            <option value="1">very easy</option>
                            <option value="2">easy</option>
                            <option value="3">okay</option>
                            <option value="4">difficult</option>
                            <option value="5">very difficult</option>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="rating" class="form-label">Rating:</label>
                        <select id="rating" name="rating" class="form-select" @bind="_rating" required>
                            <option value="" disabled>Rate Tour</option>
                            <option value="1">1 (very bad)</option>
                            <option value="2">2 (bad)</option>
                            <option value="3">3 (okay)</option>
                            <option value="4">4 (good)</option>
                            <option value="5">5 (very good)</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="totalDistance" class="form-label">Total Distance:</label>
                        <div class="input-group">
                            <input type="text" id="totalDistance" name="totalDistance" class="form-control" value="@_totalDistanceDisplay" readonly>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="totalTime" class="form-label">Total Time:</label>
                        <div class="input-group">
                            <input type="text" id="totalTime" name="totalTime" class="form-control" value="@_totalTimeDisplay" readonly>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="comment" class="form-label">Comment:</label>
                    <textarea id="comment" name="comment" class="form-control" @bind="_comment" style="height:10px"></textarea>
                </div>
                <button type="submit" class="btn btn-primary" @onclick="CreateOrUpdateTourLog">Submit</button>
                <button type="button" class="btn btn-danger" @onclick="ResetForm">Reset</button>
            </form>

            <!-- Search Form -->
            <div class="mb-3" style="margin-top:20px">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search..." @bind="searchQuery" @oninput="SearchTourLogs" />
                    <button type="button" class="btn btn-primary" @onclick="SearchTourLogs">
                        Search
                    </button>
                </div>
            </div>

            <div class="mt-4">
                <h5>Tour Logs</h5>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Tour</th>
                            <th>Date</th>
                            <th>Difficulty</th>
                            <th>Rating</th>
                            <th>Comment</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var log in filteredTourLogModelList)
                        {
                            <tr>
                                <td class="text-truncate" style="max-width: 75px;">@GetTourName(log.TourId)</td>
                                <td class="text-truncate" style="max-width: 75px;">@log.DateTime.ToShortDateString()</td>
                                <td class="text-truncate" style="max-width: 75px;">@log.Difficulty</td>
                                <td class="text-truncate" style="max-width: 75px;">@log.Rating</td>
                                <td class="text-truncate" style="max-width: 75px;">@log.Comment</td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-primary btn-sm" @onclick="() => EditTourLog(log)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTourLog(log.Id)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                        <button class="btn btn-info btn-sm" @onclick="() => ToggleDetails(log)">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-md-6">
            <div class="text-center">
                <h4><b>TourLog Details</b></h4>
            </div>
            <!-- Map Div -->
            <div id="map" style="height: 400px; width: 100%;"></div> <!-- Added height and width -->
            <br />
            @if (_showDetails)
            {
                <div>
                    <p><strong>Tour:</strong> @GetTourName(_tourLogModel.TourId)</p>
                    <p><strong>Difficulty:</strong> @_tourLogModel.Difficulty</p>
                    <p><strong>Rating:</strong> @_tourLogModel.Rating</p>
                    <p><strong>Distance:</strong> @_tourLogModel.TotalDistance</p>
                    <p><strong>Time:</strong> @_tourLogModel.TotalTime</p>
                    <p><strong>Comment:</strong> @_tourLogModel.Comment</p>
                    <p><strong>Datum:</strong> @_tourLogModel.DateTime</p>
                </div>
            }
        </div>


    </div>
</div>

@code {
    private Guid _selectedTourId;
    private TourLogModel _tourLogModel { get; set; } = new TourLogModel();
    private DateTime _datum = DateTime.Today;
    private int _difficulty;
    private int _rating;
    private string _totalDistanceDisplay;
    private string _totalTimeDisplay;
    private string _comment;
    private List<TourModel> _tourModelList { get; set; }
    private List<TourLogModel> _tourLogModelList { get; set; }
    private Guid _editingTourLogId = Guid.Empty;
    private object directions; // Add this line to define the directions variable

    private ElementReference formRef;
    private string searchQuery = string.Empty;

    protected override void OnInitialized()
    {
        LoadTourData();
        LoadTourLogs();
    }

    private async Task CreateOrUpdateTourLog()
    {
        if (IsValidForm())
        {
            _tourLogModel.TourId = _selectedTourId;
            _tourLogModel.DateTime = _datum;
            _tourLogModel.Difficulty = _difficulty;
            _tourLogModel.Rating = _rating;
            _tourLogModel.Comment = _comment;

            if (_editingTourLogId == Guid.Empty)
            {
                // Create new TourLog
                await TourLogService.CreateTourLogAsync(_tourLogModel);
            }
            else
            {
                // Update existing TourLog
                _tourLogModel.Id = _editingTourLogId;
                await TourLogService.UpdateTourLogAsync(_tourLogModel);
                _editingTourLogId = Guid.Empty;
            }

            LoadTourLogs();
            ResetForm();
        }
    }

    private bool IsValidForm()
    {
        return _selectedTourId != Guid.Empty &&
               _datum != default &&
               _difficulty > 0 &&
               _rating > 0;
    }

    private bool _showDetails = false;

    private void ToggleDetails(TourLogModel tourLog)
    {
        if (_tourLogModel != tourLog)
        {
            _tourLogModel = tourLog;
            _showDetails = true;
        }
        else
        {
            _showDetails = !_showDetails;
        }
    }

    private void LoadTourData()
    {
        _tourModelList = TourService.GetTours();
    }

    private void LoadTourLogs()
    {
        _tourLogModelList = TourLogService.GetTourLogs();
    }

    private void OnTourChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out var selectedTourId))
        {
            _selectedTourId = selectedTourId;
            var selectedTour = _tourModelList.FirstOrDefault(t => t.Id == selectedTourId);
            if (selectedTour != null)
            {
                _totalDistanceDisplay = selectedTour.Distance.ToString();
                _totalTimeDisplay = selectedTour.EstimatedTime.ToString();
            }
            else
            {
                _totalDistanceDisplay = string.Empty;
                _totalTimeDisplay = string.Empty;
            }
        }
    }

    private async Task DeleteTourLog(Guid tourLogModelId)
    {
        await TourLogService.DeleteTourLogAsync(tourLogModelId);
        LoadTourLogs();
    }

    private void ResetForm()
    {
        _selectedTourId = Guid.Empty;
        _datum = DateTime.Now;
        _difficulty = 0;
        _rating = 0;
        _totalDistanceDisplay = string.Empty;
        _totalTimeDisplay = string.Empty;
        _comment = string.Empty;
        _editingTourLogId = Guid.Empty;

        JSRuntime.InvokeVoidAsync("resetTourSelect");
    }

    private string GetTourName(Guid tourId)
    {
        var tour = _tourModelList.FirstOrDefault(t => t.Id == tourId);
        return tour != null ? tour.Name : " Press icon to see the details";
    }

    private void ShowTourLogInfo(TourLogModel tourLog)
    {
        _tourLogModel = tourLog;
    }

    private void EditTourLog(TourLogModel tourLog)
    {
        _editingTourLogId = tourLog.Id;
        _selectedTourId = tourLog.TourId;
        _datum = tourLog.DateTime;
        _difficulty = tourLog.Difficulty;
        _rating = tourLog.Rating;
        _comment = tourLog.Comment;

        var selectedTour = _tourModelList.FirstOrDefault(t => t.Id == _selectedTourId);
        if (selectedTour != null)
        {
            _totalDistanceDisplay = selectedTour.Distance.ToString();
            _totalTimeDisplay = selectedTour.EstimatedTime.ToString();
        }
    }

    private void SearchTourLogs()
    {
        StateHasChanged();
    }

    private IEnumerable<TourLogModel> filteredTourLogModelList
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                return _tourLogModelList;
            }
            return _tourLogModelList.Where(log =>
                GetTourName(log.TourId).Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                log.DateTime.ToShortDateString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                log.Difficulty.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                log.Rating.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                log.Comment.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            );
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the map after the first render
            directions = new { bbox = new double[] { 16.3725, 48.2082, 16.3735, 48.2092 } }; // Example bounding box
            await JSRuntime.InvokeVoidAsync("initializeMap", "map", directions);
        }
    }
}

<script>
    window.initializeMap = async (mapId, directions) => {
        // Funktion zum Laden von Leaflet.js-Skript
        const loadLeaflet = () => {
            return new Promise((resolve, reject) => {
                if (window.L) {
                    resolve();
                } else {
                    const script = document.createElement('script');
                    script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
                    script.onload = resolve;
                    script.onerror = reject;
                    document.head.appendChild(script);
                }
            });
        };

        // Warte auf das Laden von Leaflet.js
        try {
            await loadLeaflet();
        } catch (error) {
            console.error('Fehler beim Laden von Leaflet.js:', error);
            return;
        }

        // Leaflet.js ist nun geladen, Karteninitialisierung fortsetzen
        var map = L.map(mapId);
        var bbox = directions.bbox;

        map.fitBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '2024 © FH Technikum Wien'
        }).addTo(map);

        // Füge GeoJSON-Layer zur Karte hinzu
        try {
            console.log('GeoJSON-Objekt:', directions); // Logge das GeoJSON-Objekt zur Fehlerbehebung
            L.geoJSON(directions).addTo(map);
        } catch (error) {
            console.error('Fehler beim Hinzufügen von GeoJSON zur Karte:', error);
        }
    };


    window.resetTourSelect = function () {
        document.getElementById('tourSelect').selectedIndex = 0;
    };
</script>
